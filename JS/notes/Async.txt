Asynchronous Javascript(AJAX):
   AJAX (Asynchronous JavaScript and XML) is a programming technique that allows web pages to update content asynchronously by exchanging data with a server behind the scenes. This means you can update parts of a web page without reloading the entire page.

Key Features of AJAX:
1. Asynchronous: Operations happen in the background
2. No page reload required
3. Better user experience
4. Real-time data updates
5. Reduced server load

Real-World AJAX Examples:
1. E-commerce Cart Updates:
   - When you add items to cart, only cart section updates
   - Price and quantity updates happen without page refresh

2. Social Media Features:
   - Live notifications
   - Real-time message updates
   - Twitter/Facebook feed updates
   - Like/Unlike functionality

3. Search Suggestions:
   - Google's autocomplete suggestions
   - Product search in e-commerce sites

4. Form Validation:
   - Real-time username availability check
   - Email validation without submitting form


Timers in JavaScript:
==================

1. setTimeout:
-------------
Purpose: Executes a function once after a specified delay
Syntax: setTimeout(callback, delayInMilliseconds, [arg1, arg2, ...])

Examples:
// Basic setTimeout
setTimeout(() => {
    console.log("This appears after 2 seconds");
}, 2000);

// setTimeout with parameters
const greet = (name) => {
    console.log(`Hello, ${name}!`);
};
setTimeout(greet, 1000, "John");

// Clearing setTimeout
const timeoutId = setTimeout(() => {
    console.log("This won't run");
}, 1000);
clearTimeout(timeoutId); // Cancels the timeout

2. setInterval:
--------------
Purpose: Executes a function repeatedly with a fixed delay between each call
Syntax: setInterval(callback, intervalInMilliseconds, [arg1, arg2, ...])

Examples:
// Basic setInterval
const intervalId = setInterval(() => {
    console.log("This prints every 1 second");
}, 1000);

// Practical Example: Digital Clock
const updateClock = () => {
    const now = new Date();
    console.log(now.toLocaleTimeString());
};
const clockInterval = setInterval(updateClock, 1000);

3. clearTimeout & clearInterval:
------------------------------
Purpose: Stops the execution of setTimeout or setInterval

Examples:
// clearTimeout Example
const delayedFunction = setTimeout(() => {
    console.log("This won't execute");
}, 5000);

if (someCondition) {
    clearTimeout(delayedFunction);
}

// clearInterval Example
const counter = {
    count: 0,
    intervalId: null,
    start: function() {
        this.intervalId = setInterval(() => {
            this.count++;
            console.log(this.count);
            if (this.count >= 10) {
                this.stop();
            }
        }, 1000);
    },
    stop: function() {
        clearInterval(this.intervalId);
        console.log("Counter stopped");
    }
};

counter.start(); // Starts counting
// Will automatically stop at 10 using clearInterval

Practical Use Cases:
------------------
1. setTimeout:
   - Delayed notifications
   - Auto-save features
   - Delayed form submission
   - Animation triggers

2. setInterval:
   - Live clock updates
   - Auto-refresh content
   - Game loop
   - Polling server for updates
   - Slideshow animations

3. clearTimeout/clearInterval:
   - Cancel pending notifications
   - Stop animations
   - Clear auto-refresh when page is inactive
   - Stop game loop when game ends
